const incMake4k = require('../4klang_inc/4klang_inc.make.js');

global.bpm = 90;
global.pattern_size_shift = 3;
global.beats_per_pattern_shift = 0;
calculatePatternSize();
global.looptimes = 100;

addInstrument('kick', `	GO4K_ENV	ATTAC(0),DECAY(64),SUSTAIN(96),RELEASE(64),GAIN(120)
GO4K_FST	AMOUNT(128),DEST(0*MAX_UNIT_SLOTS+2+FST_SET)
GO4K_ENV	ATTAC(0),DECAY(70),SUSTAIN(0),RELEASE(0),GAIN(100)
GO4K_DST	DRIVE(32), SNHFREQ(128), FLAGS(0)
GO4K_FST	AMOUNT(80),DEST(6*MAX_UNIT_SLOTS+1+FST_SET)
GO4K_FOP	OP(FOP_POP)
GO4K_VCO	TRANSPOSE(46),DETUNE(64),PHASE(0),GATES(85),COLOR(64),SHAPE(64),GAIN(48),FLAGS(TRISAW)
GO4K_FOP	OP(FOP_MULP)
GO4K_FOP	OP(FOP_LOADNOTE)
GO4K_FOP	OP(FOP_MULP)
GO4K_PAN	PANNING(40)
GO4K_OUT	GAIN(18), AUXSEND(1)`);

addInstrument('snare', `	GO4K_ENV	ATTAC(0),DECAY(76),SUSTAIN(0),RELEASE(0),GAIN(56)
GO4K_FST	AMOUNT(128),DEST(0*MAX_UNIT_SLOTS+2+FST_SET)
GO4K_VCO	TRANSPOSE(64),DETUNE(64),PHASE(64),GATES(85),COLOR(64),SHAPE(64),GAIN(50),FLAGS(NOISE)
GO4K_FOP	OP(FOP_MULP)
GO4K_VCF	FREQUENCY(80),RESONANCE(128),VCFTYPE(LOWPASS)
GO4K_FOP	OP(FOP_LOADNOTE)
GO4K_FOP	OP(FOP_MULP)
GO4K_PAN	PANNING(80)
GO4K_OUT	GAIN(11), AUXSEND(2)
`);

addInstrument('hihat', `	GO4K_ENV	ATTAC(0),DECAY(64),SUSTAIN(15),RELEASE(32),GAIN(110)
GO4K_VCO	TRANSPOSE(64),DETUNE(64),PHASE(64),GATES(85),COLOR(64),SHAPE(64),GAIN(128),FLAGS(NOISE)
GO4K_FOP	OP(FOP_MULP)
GO4K_VCF	FREQUENCY(128),RESONANCE(128),VCFTYPE(BANDPASS)
GO4K_FOP	OP(FOP_LOADNOTE)
GO4K_FOP	OP(FOP_MULP)
GO4K_PAN	PANNING(56)
GO4K_OUT	GAIN(60), AUXSEND(0)
`);

addInstrument('bass', `
GO4K_ENV	ATTAC(32),DECAY(70),SUSTAIN(60),RELEASE(75),GAIN(25)
GO4K_FST	AMOUNT(120),DEST(0*MAX_UNIT_SLOTS+2+FST_SET)
GO4K_VCO	TRANSPOSE(64),DETUNE(64),PHASE(32),GATES(85),COLOR(80),SHAPE(64),GAIN(128),FLAGS(PULSE)
GO4K_VCO	TRANSPOSE(64),DETUNE(72),PHASE(32),GATES(85),COLOR(96),SHAPE(64),GAIN(128),FLAGS(TRISAW)
GO4K_VCO	TRANSPOSE(32),DETUNE(64),PHASE(0),GATES(85),COLOR(64),SHAPE(90),GAIN(128),FLAGS(SINE|LFO)
GO4K_FST	AMOUNT(68),DEST(2*MAX_UNIT_SLOTS+2+FST_SET)
GO4K_FST	AMOUNT(60),DEST(3*MAX_UNIT_SLOTS+2+FST_SET)
GO4K_FOP	OP(FOP_POP)
GO4K_FOP	OP(FOP_ADDP)
GO4K_FOP	OP(FOP_MULP)
GO4K_VCF	FREQUENCY(18),RESONANCE(64),VCFTYPE(PEAK)
GO4K_VCF	FREQUENCY(32),RESONANCE(48),VCFTYPE(LOWPASS)
GO4K_DST	DRIVE(88), SNHFREQ(128), FLAGS(0)
GO4K_PAN	PANNING(80)
GO4K_DLL	PREGAIN(64),DRY(128),FEEDBACK(96),DAMP(64),FREQUENCY(0),DEPTH(0),DELAY(17),COUNT(1) ; ERROR
GO4K_FOP	OP(FOP_XCH)
GO4K_DLL	PREGAIN(64),DRY(128),FEEDBACK(64),DAMP(64),FREQUENCY(0),DEPTH(0),DELAY(18),COUNT(1) ; ERROR
GO4K_FOP	OP(FOP_XCH)
GO4K_OUT	GAIN(22), AUXSEND(10)
`);

const epiano = (pan, phase) => {
	return `GO4K_ENV	ATTAC(32),DECAY(80),SUSTAIN(30),RELEASE(40),GAIN(45)
	GO4K_VCO	TRANSPOSE(76),DETUNE(64),PHASE(${phase}),GATES(0),COLOR(100),SHAPE(32),GAIN(128),FLAGS(SINE|VCO_STEREO)
	GO4K_FOP	OP(FOP_MULP)
	GO4K_FOP	OP(FOP_MULP)
	GO4K_VCO	TRANSPOSE(1),DETUNE(32),PHASE(0),GATES(85),COLOR(96),SHAPE(64),GAIN(128),FLAGS(SINE)
	GO4K_FOP	OP(FOP_MULP)
	GO4K_PAN	PANNING(${pan})
	GO4K_DLL	PREGAIN(64),DRY(128),FEEDBACK(96),DAMP(64),FREQUENCY(0),DEPTH(0),DELAY(32),COUNT(1)
	GO4K_OUT	GAIN(60), AUXSEND(100)`;
}
addInstrument('epiano', epiano(30,0));
addInstrument('epiano2', epiano(60,32));
addInstrument('epiano3', epiano(90,64));
addInstrument('epiano4', epiano(70,120));
addInstrumentGroup('piano', ['epiano','epiano2','epiano3','epiano4']);

playPatterns({
  kick: pp(4,[
    e5, , , ,
    e5, , , ,
    e5, , , ,
    e5, , e5, ,]),
  hihat: pp(6,[
    80,,20,80,,50,
  	80,,20,80,,50,
  	80,,20,80,,50,
  	80,,20,80,,50,]),
  snare: pp(6,[
    ,,,,,,
  	80,,,,,30,
  	,,60,,,20,
  	80,,,,,30,]),
  bass: pp(6,[
  	d3(1),,,,,c4,
    d4,,,,,c4,
    ,,c4,,,a3,
    c4(0.5),,,d4
  ]),
  piano: pp(6,[
  	,,,[a4,d5,fs5],,,
    ,,[a4,d5,fs5],,,
    [b4,d5,g5],,,[c5,e5,a5],,,
    ,,,,[a4,d5,fs5],    
  ],4)
});

incMake4k.makeVierKlangInc();